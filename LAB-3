#include<stdio.h>
#include<math.h>
#include<ctype.h>
#define SIZE 50
char stack[SIZE];
int top=-1;
void push(char elem)
{
    stack[++top]=elem;
}
char pop()
{
    return(stack[top--]);
}
int pr(char symbol)
{
    if(symbol=='^')
    return(3);
    else if(symbol=='*' || symbol=='/')
    return(2);
    else if(symbol=='+' || symbol=='-')
    return(1);
    else
    return(0);
}
int main()
{
    char postfix[50],infix[50],elem,ch;
    int i=0,k=0;
    printf("Enter infix expression here: \n");
    scanf("%s",infix);
    push('#');
    while( (ch=infix[i++]) !='\0')
    {
        if( ch == '(')
        {
            push(ch);
        }
        else if(isalnum(ch))
        {
            postfix[k++]=ch;
        }
        else if( ch == ')')
        {
            while( stack[top] !='(')
                {
                   postfix[k++]=pop();
                }
           elem=pop();
        }
        else
        {
            while( pr(stack[top])>=pr(ch))
                {
                    postfix[k++]=pop();
                }
            push(ch);
        }
    }
    while( stack[top] !='#')
    {
        postfix[k++]=pop();
    }
    postfix[k]='\0';
    printf("\nConverted postfix expression is: %s",postfix);
    return(0);
}

//Postfix evaluation
#include <stdio.h>
#include <ctype.h>
int stack[20];
int top = -1;
void push(int x)
{
    stack[++top]= x;
}
int pop()
{
    return stack[top--];
}
int main()
{
    char postfix[20];
    char *p;
    int n1,n2,n3,num;
    printf("Enter the postfix expression : ");
    scanf("%s",postfix);
    p=postfix;
    while(*p !='\0')
    { 
        if(isdigit(*p))
        {
            num = *p - 48;
            push(num);
        }
        else
            {
               n2=pop();
               n1=pop();
               switch(*p)
               {
                   case '+' :
                   {
                   n3 = n1+n2;
                   break;
                   }
                   case '-' :
                   {
                   n3 = n1-n2;
                   break;
                   }
                   case '*' :
                   {
                   n3 = n1*n2;
                   break;
                   }
                   case '/' :
                   {
                   n3 = n1/n2;
                   break;
                   }
              }
            push(n3);
            }
            p++;
    }
     printf("\nThe result of the expression is %s = %d\n",postfix,pop());
return 0;
}

//Direct recursion Factorial

#include <stdio.h>
long int fact(int n);
int main()
{
    int n;
    printf("Enter a positive integer: ");
    scanf("%d",&n);
    printf("Factorial of %d = %ld", n,fact(n));
    return 0;
}
long int fact(int n)
{
    if(n>=1)
    return n*fact(n-1);
    else return 1;
}

