//10.Write a program

a) To construct a binary Search tree.
b) To traverse the tree using all the methods i.e., in-order, preorder and post
order
c) To display the elements in the tree.

#include <stdio.h>
#include <stdlib.h>

typedef struct BST
{
    int data;
    struct BST *left;
    struct BST *right;
}node;

node *create()
{
    node *temp;
    printf("\nEnter data: ");
    temp = (node*)malloc(sizeof(node));
    scanf("%d",&temp->data);
    temp->left = temp->right = NULL;
    return temp;
}

void insert(node *root,node *temp)
{
    if(temp->data<root->data)
    {
        if(root->left != NULL)
            insert(root->left,temp);
        else
            root->left = temp;
    }
    if(temp->data>root->data)
    {
        if(root->right != NULL)
            insert(root->right,temp);
        else
            root->right = temp;
    }
}

void inorder(node *root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        printf(" %d ",root->data);
        inorder(root->right);
    }
}

void postorder(node *root)
{
    if(root!=NULL)
    {
        postorder(root->left);
        postorder(root->right);
        printf(" %d ",root->data);
    }
}

void preorder(node *root)
{
    if(root!=NULL)
    {
        printf(" %d ",root->data);
        postorder(root->left);
        postorder(root->right);
    }
}
int main()
{   
    int choice=0;
    node *root=NULL,*temp;
    printf("Binary search tree insertion and traversal\n");
    while(choice!=5)
    {
    printf("\n1:Node insertion 2:Pre-order traversal 3:In-order traversal 4:Post-order traversal 5:Exit\n");
    printf("Enter your choice: ");
    scanf("%d",&choice);
    switch(choice)
    {
        case 1:
        temp = create();
        if(root == NULL)
            root = temp;
        else
            insert(root,temp);
        break;
        case 2:
        preorder(root);
        break;
        case 3:
        inorder(root);
        break;
        case 4:
        postorder(root);
        break;
        default:printf("Wrong choice entered , please try again\n");
    }
    }
    return 0;
}
