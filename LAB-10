//Doubly linked list , primitive functions

#include <stdio.h>
#include <stdlib.h>
struct node
{
  int data;
  struct node *next;
  struct node *prev;
};
struct node *head = NULL;
void
insert_begin ()
{
  int item = 0;
  struct node *newnode = (struct node *) malloc (sizeof (struct node));
  printf ("Enter the value to be inserted: \n");
  scanf ("%d", &item);
  if (head == NULL)
    {
      newnode->next = NULL;
      newnode->prev = NULL;
      newnode->data = item;
      head = newnode;
    }
  else
    {
      newnode->data = item;
      newnode->prev = NULL;
      newnode->next = head;
      head->prev = newnode;
      head = newnode;
    }

}

void display ()
{
  printf ("Elements of the list are: \n");
  struct node *temp = head;
  while (temp != NULL)
    {
      printf ("%d  ", temp->data);
      temp = temp->next;
    }
}

void random_insert ()
{
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    struct node *temp = head;
    int i = 0;
    int loc = 0;
    int item = 0;
    printf("Enter the position before which you want to insert an element: \n");
    scanf("%d",&loc);
    printf("Enter the element to be inserted: \n");
    scanf("%d",&item);
    temp = head;
    for(i=1;i<loc-1;i++)
    {
        temp = temp->next;
        if(temp == NULL)
        {
            printf("Insertion not possible\n");
            return;
        }

    }
    newnode->data = item;
    newnode->next = temp->next;
    newnode->prev = temp;
    temp ->next = newnode;
    temp->next->prev = newnode;
    printf("Node inserted\n");
}
void delete_by_value ()
{
    struct node *temp = head;
    int i = 0;
    int value = 0;
    printf("Enter the element to be deleted : \n");
    scanf("%d",&value);
    while(temp->data!= value)
    {
        temp = temp->next;
    }
    if(temp->next == NULL)
    {
        printf("Deletion not possible\n");
    }
    else
    {
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;
        free(temp);
        printf("\nNode deleted\n");
    }
}

int main ()
{
  int choice = 0;
  printf ("Doubly linked list\n");
  while(choice != 5)
    {
      printf("\n1:Insert 2: Insert before a position 3:Delete by value 4:Display 5:Exit\n");
      printf ("Enter your choice: \n");
      scanf ("%d", &choice);
      switch (choice)
	{
	case 1:
	  insert_begin ();
	  break;
	case 2:
	  random_insert ();
	  break;
	case 3:
	  delete_by_value ();
	  break;
	case 4:
	  display ();
	  break;
	default:
	  printf ("Incorrect number entered, please try again\n");
	}
    }

  return 0;
}
